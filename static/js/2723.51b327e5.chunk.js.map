{"version":3,"file":"static/js/2723.51b327e5.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/index3.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.10.0\n */\nconst supportedTimeZones = (() => {\n    const platformTimeZones = Intl.supportedValuesOf('timeZone');\n    // not all browsers include these time zones, so we add them to ensure consistent groups\n    const etcTimeZones = [\n        \"Etc/GMT+1\",\n        \"Etc/GMT+10\",\n        \"Etc/GMT+11\",\n        \"Etc/GMT+12\",\n        \"Etc/GMT+2\",\n        \"Etc/GMT+3\",\n        \"Etc/GMT+4\",\n        \"Etc/GMT+5\",\n        \"Etc/GMT+6\",\n        \"Etc/GMT+7\",\n        \"Etc/GMT+8\",\n        \"Etc/GMT+9\",\n        \"Etc/GMT-1\",\n        \"Etc/GMT-10\",\n        \"Etc/GMT-11\",\n        \"Etc/GMT-12\",\n        \"Etc/GMT-13\",\n        \"Etc/GMT-14\",\n        \"Etc/GMT-2\",\n        \"Etc/GMT-3\",\n        \"Etc/GMT-4\",\n        \"Etc/GMT-5\",\n        \"Etc/GMT-6\",\n        \"Etc/GMT-7\",\n        \"Etc/GMT-8\",\n        \"Etc/GMT-9\"\n    ];\n    return [...new Set([...platformTimeZones, ...etcTimeZones])];\n})();\n\nconst now = new Date();\nconst startDate = now.toISOString();\nconst daysInYear = 365;\nconst groupDateRange = daysInYear;\nconst defaultGroupingOptions = {\n    startDate,\n    groupDateRange,\n    debug: false,\n};\n\nconst continentAllowList = new Set([\n    'Europe',\n    'Asia',\n    'America',\n    'America/Argentina',\n    'Africa',\n    'Australia',\n    'Pacific',\n    'Atlantic',\n    'Antarctica',\n    'Arctic',\n    'Indian',\n]);\nconst _getDates = (startDate, numberDays, dateEngine) => {\n    const dateArray = [];\n    let date = dateEngine.create(startDate);\n    for (let i = 0; i <= numberDays; i++) {\n        date = dateEngine.increase(date);\n        dateArray.push(dateEngine.formatToIsoDateString(date));\n    }\n    return dateArray;\n};\nconst _extractContinent = (label) => {\n    if (label.includes('Istanbul')) {\n        return 'Europe';\n    }\n    const lastIndex = label.lastIndexOf('/');\n    return lastIndex === -1 ? label : label.slice(0, lastIndex);\n};\nconst _isRegularContinent = (continent) => continentAllowList.has(continent);\nconst generateTimeZoneMetadata = (timeZoneItems, startDate, numberDays, dateEngine, debug = false) => {\n    const processedDates = new Map();\n    if (debug) {\n        console.log(`Initializing data starting ${startDate} with ${numberDays} days in the future, comparing ${timeZoneItems.length} timezones`);\n    }\n    const theDates = _getDates(startDate, numberDays, dateEngine);\n    return timeZoneItems.map((tzItem) => {\n        const label = tzItem.label;\n        const continent = _extractContinent(label);\n        const dates = theDates.map((date) => {\n            const key = `${date}-${label}`;\n            let utc = processedDates.get(key);\n            if (utc) {\n                return utc;\n            }\n            utc = dateEngine.isoToTimeZone(date, label);\n            processedDates.set(key, utc);\n            return utc;\n        });\n        return {\n            ...tzItem,\n            continent,\n            isRegularContinent: _isRegularContinent(continent),\n            dates,\n        };\n    });\n};\nconst compareDateArrs = (array1, array2, dateEngine) => array1.length === array2.length &&\n    array1.every((value, index) => dateEngine.same(value, array2[index]));\nconst getGroupLabelTimeZoneIndices = (rawTZs, max = 5) => {\n    const shrinkedTzs = rawTZs.filter(({ label }) => _isRegularContinent(_extractContinent(label)));\n    if (shrinkedTzs.length === 0) {\n        return [0];\n    }\n    const validLabels = shrinkedTzs.map((tz) => rawTZs.indexOf(tz));\n    return equallyDistributedSampling(validLabels, max);\n};\nfunction equallyDistributedSampling(items, maxItems = 5) {\n    const totalItems = items.length;\n    if (totalItems <= maxItems) {\n        return items;\n    }\n    const numberItemsToSelect = Math.min(totalItems - 2, maxItems - 2);\n    const stepSize = (totalItems - 1) / (numberItemsToSelect + 1);\n    return [\n        items[0],\n        ...Array.from({ length: numberItemsToSelect }, (_, i) => items[Math.round((i + 1) * stepSize)]),\n        items[totalItems - 1],\n    ];\n}\n\nasync function groupTimeZones(options) {\n    const { debug, groupDateRange, hooks, startDate, dateEngine } = {\n        ...defaultGroupingOptions,\n        ...options,\n    };\n    const grouping = [];\n    if (!dateEngine) {\n        throw new Error('dateEngine is required');\n    }\n    const timeZoneItems = supportedTimeZones.map((tz) => ({ label: tz }));\n    hooks?.onBeforeTimeZoneMetadataCreate?.(timeZoneItems);\n    const timeZoneMetadata = generateTimeZoneMetadata(timeZoneItems, startDate, groupDateRange, dateEngine, debug);\n    hooks?.onTimeZoneMetadataCreate?.(timeZoneMetadata);\n    // We traverse the mappedDB and see if we find matches by comparing each set\n    // of transformed date for that specific TZ.\n    for (const tzMetadatumI of timeZoneMetadata) {\n        const { label, continent, dates } = tzMetadatumI;\n        // ignore if we visited this element already\n        if (tzMetadatumI.visited) {\n            continue;\n        }\n        // Mark element as already visited\n        tzMetadatumI.visited = true;\n        // The grouped timezone that we want as a result\n        const newGroup = {\n            labelTzIndices: undefined,\n            tzs: [{ label }],\n        };\n        hooks?.onGroupCreate?.(newGroup, tzMetadatumI);\n        for (const tzMetadatumJ of timeZoneMetadata.filter((_) => !_.visited)) {\n            const { label: labelJ, continent: continentJ, isRegularContinent: isRegularContinentJ, dates: datesJ, } = tzMetadatumJ;\n            // We define a matching TZ by:\n            // 1) if both continents match (avoid grouping Antarctica with anything else)\n            // 2) if the transformed dates match in both TZs\n            if ((continent === continentJ || !isRegularContinentJ) &&\n                compareDateArrs(dates, datesJ, dateEngine)) {\n                const tzItem = { label: labelJ };\n                newGroup.tzs.push(tzItem);\n                hooks?.onGroupTimeZoneAdd?.(newGroup, tzItem, tzMetadatumJ);\n                // Mark element as already visited\n                tzMetadatumJ.visited = true;\n            }\n        }\n        grouping.push(newGroup);\n        hooks?.onGroupAdd?.(newGroup);\n    }\n    // Now that we have a group, we want an easy way to find a fitting label for the group\n    // which is defined as the list of the most-common 7 cities, shown in alphabetical order\n    const finalGrouping = grouping\n        .map((group) => {\n        hooks?.onBeforeFinalGroupCreate?.(group);\n        group.tzs = group.tzs.sort((a, b) => a.label.localeCompare(b.label));\n        const finalGrouping = {\n            labelTzIndices: getGroupLabelTimeZoneIndices(group.tzs, 7),\n            tzs: group.tzs.map((_) => _.label),\n        };\n        hooks?.onFinalGroupCreate?.(finalGrouping, group);\n        return finalGrouping;\n    })\n        .sort((a, b) => b.tzs.length - a.tzs.length);\n    if (debug) {\n        const missingTzs = supportedTimeZones\n            .map((tz) => (finalGrouping.some((y) => y.tzs.includes(tz)) ? null : tz))\n            .filter(Boolean);\n        if (missingTzs.length > 0) {\n            throw new Error(`There are ${missingTzs.length} missing timezones: ${missingTzs.toString()}`);\n        }\n    }\n    return hooks?.onFinalGroupingCreate\n        ? hooks.onFinalGroupingCreate(finalGrouping)\n        : finalGrouping;\n}\n\nexport { groupTimeZones };\n"],"names":["supportedTimeZones","platformTimeZones","Intl","supportedValuesOf","Set","defaultGroupingOptions","startDate","Date","toISOString","groupDateRange","debug","continentAllowList","_extractContinent","label","includes","lastIndex","lastIndexOf","slice","_isRegularContinent","continent","has","generateTimeZoneMetadata","timeZoneItems","numberDays","dateEngine","arguments","length","undefined","processedDates","Map","console","log","concat","theDates","_getDates","dateArray","date","create","i","increase","push","formatToIsoDateString","map","tzItem","dates","key","utc","get","isoToTimeZone","set","isRegularContinent","compareDateArrs","array1","array2","every","value","index","same","getGroupLabelTimeZoneIndices","rawTZs","max","shrinkedTzs","filter","_ref","items","maxItems","totalItems","numberItemsToSelect","Math","min","stepSize","Array","from","_","round","equallyDistributedSampling","tz","indexOf","async","groupTimeZones","options","_hooks$onBeforeTimeZo","_hooks$onTimeZoneMeta","hooks","grouping","Error","onBeforeTimeZoneMetadataCreate","call","timeZoneMetadata","onTimeZoneMetadataCreate","tzMetadatumI","_hooks$onGroupCreate","_hooks$onGroupAdd","visited","newGroup","labelTzIndices","tzs","onGroupCreate","tzMetadatumJ","labelJ","continentJ","isRegularContinentJ","datesJ","_hooks$onGroupTimeZon","onGroupTimeZoneAdd","onGroupAdd","finalGrouping","group","_hooks$onBeforeFinalG","_hooks$onFinalGroupCr","onBeforeFinalGroupCreate","sort","a","b","localeCompare","onFinalGroupCreate","missingTzs","some","y","Boolean","toString","onFinalGroupingCreate"],"sourceRoot":""}